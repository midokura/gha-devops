---
name: OSS License Check | Docker
description: |
  Action to check the OSS License for all the docker layers


  Example:

  ```
  - name: OSS License Check | Docker
    uses: midokura/gha-devops/oss-license-check-docker@main
    with:
      dockerImage: "ghcr.io/midokura/docker-image:dev"
      runScancodeToolkit: "true"
      githubToken: <secrets.TOKEN_PACKAGES>
      repository: midokura/repository
      tag: "1.0.2"
  ```

inputs:
  dockerImage:
    description: Docker image to scan
    required: true
  runScancodeToolkit:
    description: Run scancode-toolkit
    required: false
    default: "false"
  githubToken:
    description: GitHub repo access token
    required: false
  repository:
    description: GitHub repository in ORG/NAME format (midokura/...)
    required: false
  tag:
    description: Tag name (default if not provided)
    required: false

runs:
  using: composite
  steps:

    # Setup
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # Docker
    - name: Get docker image
      shell: bash
      run: docker pull ${{ inputs.dockerImage }}

    # Tern
    - name: Setup Tern
      shell: bash
      env:
        SKOPEO_VERSION: 1.12.0
      run: |
        sudo apt update
        if ! command -v skopeo; then
          wget -O skopeo https://github.com/lework/skopeo-binary/releases/download/v${SKOPEO_VERSION}/skopeo-linux-amd64
          sudo install skopeo /usr/local/bin
          rm -f skopeo
          skopeo --version
          sudo mkdir -p /etc/containers
          # create Skopeo configuration
          echo '{"default":[{"type":"insecureAcceptAnything"}]}' | sudo tee /etc/containers/policy.json
        fi
        sudo apt install -f -y attr jq
        python3 -m venv ternenv
        source ternenv/bin/activate
        pip install tern scancode-toolkit
    - name: Run Tern
      continue-on-error: true
      shell: bash
      env:
        IMAGE_NAME: ${{ inputs.dockerImage }}
        FORMAT: spdxjson
        OUTPUT: tern.json
      run: |
        source ternenv/bin/activate
        tern report -i ${IMAGE_NAME} -f ${FORMAT} -o ${OUTPUT}
    - name: Run Tern scancode-toolkit
      if: ${{ inputs.runScancodeToolkit == 'true' }}
      continue-on-error: true
      shell: bash
      env:
        IMAGE_NAME: ${{ inputs.dockerImage }}
        OUTPUT: scancode.json
      run: |
        source ternenv/bin/activate
        tern report -x scancode -i ${IMAGE_NAME} -o ${OUTPUT}

    # Syft
    - name: Setup Syft
      shell: bash
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sudo sh -s -- -b /usr/local/bin
    - name: Run Syft
      continue-on-error: true
      shell: bash
      env:
        IMAGE_NAME: ${{ inputs.dockerImage }}
        FORMAT: spdx-json
        OUTPUT: syft.json
      run: syft ${IMAGE_NAME} -o ${FORMAT}=${OUTPUT}

    # BOM
    - name: Setup BOM
      shell: bash
      env:
        BOM_VERSION: 0.5.1
      run: |
        if ! command -v bom; then
          wget -O bom https://github.com/kubernetes-sigs/bom/releases/download/v${BOM_VERSION}/bom-amd64-linux
          sudo install bom /usr/local/bin
          rm -f bom
          bom version
        fi

    - name: Run BOM
      shell: bash
      env:
        IMAGE_NAME: ${{ inputs.dockerImage }}
        FORMAT: json
        OUTPUT: bom.json
      run: bom generate --output=${OUTPUT} --format=${FORMAT} --image ${IMAGE_NAME}

    - name: Create tar.gz archive
      shell: bash
      run: tar czvf license-report-docker.tar.gz *.json

    - name: Upload report files
      if: inputs.tag != '' && inputs.githubToken != '' && inputs.repository != ''
      uses: svenstaro/upload-release-action@v2
      with:
        repo_name: ${{ inputs.repository }}
        repo_token: ${{ inputs.githubToken }}
        file: license-report-docker.tar.gz
        asset_name: license-report-docker.tar.gz
        overwrite: true
        tag: ${{ inputs.tag }}
