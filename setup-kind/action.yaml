---
name: Setup kind
description: >
  Action for setting up a kind k8s cluster


  Example:

  ```

  - name: Setup kind
    uses: midokura/gha-devops/setup-kind@main
    with:
      dockerHubUsername: <SECRET_DOCKERHUB_USERNAME>
      dockerHubPassword: <SECRET_DOCKERHUB_PASSWORD>
      dockerLocalImages: "test/docker-image:local bitnami/postgresql:latest"
  ```

inputs:
  dockerHubUsername:
    description: DockerHub registry username
    required: true
  dockerHubPassword:
    description: DockerHub registry password
    required: true
  dockerLocalImages:
    description: Docker local images to push in kind
    required: false
    default: ''

runs:
  using: composite
  steps:
    # DockerHub pull rate limit
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ inputs.dockerHubUsername }}
        password: ${{ inputs.dockerHubPassword }}
    - name: Create kind k8s
      uses: helm/kind-action@v1.2.0
      with:
        cluster_name: kind
    # TODO: DockerHub pull rate limit
    - name: Helm repos
      shell: bash
      run: |
        helm repo add metallb https://metallb.github.io/metallb
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo add jetstack https://charts.jetstack.io
        helm repo update
    - name: Install metallb
      shell: bash
      run: |
        helm install metallb metallb/metallb --wait --atomic --create-namespace --namespace=metallb --timeout=10m \
          -f ${{ github.action_path }}/helm-metallb-values.yaml
    - name: Install nginx-ingress
      shell: bash
      run: |
        helm install nginx-ingress ingress-nginx/ingress-nginx --wait --atomic --create-namespace --namespace=nginx-ingress --timeout=10m
    - name: Install cert-manager
      shell: bash
      run: |
        helm install cert-manager -n cert-manager --create-namespace --wait --timeout=10m jetstack/cert-manager --set prometheus.enabled=falseÂ  --set installCRDs=true
    - name: Push images to kind
      if: ${{ inputs.dockerLocalImages != '' }}
      shell: bash
      run: |
        for dockerImage in ${{ inputs.dockerLocalImages }}; do
          kind load docker-image ${dockerImage}
        done
